import { camelCase } from 'scule'
import { Wordlists } from '~/constants/generated/wordlists'
import { wordlistsReference } from '~/constants/wordlist-reference'
import type { Wordlist, WordlistAnalysis, WordlistMapModel, WordlistSlug } from '~/models/wordlist'
import * as Anal from '~/utils/analysis'
import { writeFile } from '~/utils/io'

const fileGeneratedComment = `
// This file was generated by scripts/gen-wordlist-map.ts
// Do not modify this file directly
`.trim()
const exportTemplate = (content: string) => `export const WordlistMap = ${content}`

const baseOutputDir = 'constants/generated'

const analyzeWordlist = async (wordlistSlug: WordlistSlug): Promise<{ sample: string[], stats: WordlistAnalysis } | undefined> => {
  const words = Wordlists[camelCase(wordlistSlug)]

  if (!words) {
    return undefined
  }

  const wordCount = words.length

  // TODO: some ideas
  // character length
  // words count starting per letter
  // TODO: alphabetical: boolean
  // constantCase: boolean
  // allLowerCase
  // has number
  // has symbols
  // all letters..

  const longestWordExample = Anal.longestWordExample(words) ?? ''
  const shortestWordExample = Anal.shortestWordExample(words) ?? ''
  const shortestWordLength = shortestWordExample.length
  const longestWordLength = longestWordExample.length

  const meanWordLength = Anal.meanWordLength(words)
  const entropyPerWord = Anal.entropyPerWord(wordCount)

  const longestSharedPrefix = Anal.findLongestSharedPrefix(words)
  const uniqueCharacterPrefix = Anal.uniqueCharacterPrefix(words)
  const canBeShortened = Anal.canBeShortened(words)

  const efficiencyPerCharacter = Anal.efficiencyPerCharacter(words)
  const assumedEntropyPerCharacter = Anal.assumedEntropyPerCharacter(words, shortestWordLength)

  const hasDuplicatesExact = Anal.hasDuplicatesExact(words)
  const hasDuplicatesFuzzy = Anal.hasDuplicatesFuzzy(words)
  const uniqueWordsFoundExact = Anal.countUniqueWordsExact(words)
  const uniqueWordsFoundFuzzy = Anal.countUniqueWordsExact(words)
  const uniqueCharactersExact = Anal.countUniqueCharacters(words)
  const uniqueCharactersFuzzy = Anal.countUniqueCharacters(words, true)

  const hasNonAsciiCharacters = Anal.hasNonAsciiCharacters(words)
  const isAllLowercase = Anal.isAllLowercase(words)
  const hasConsistentCase = Anal.hasConsistentCase(words)
  const hasNumbers = Anal.includesDigits(words)

  const freeOfPrefixWords = !Anal.hasPrefixWords(words)
  const freeOfSuffixWords = !Anal.hasSuffixWords(words)

  const isAboveBruteForceLine = Anal.isAboveBruteForceLine(words, shortestWordLength)

  const stats = {
    words: wordCount,
    meanWordLength,
    // entropy
    entropyPerWord,
    efficiencyPerCharacter,
    assumedEntropyPerCharacter,
    // shortest and longest
    longestWordExample,
    shortestWordExample,
    shortestWordLength,
    longestWordLength,
    // prefix characters
    longestSharedPrefix,
    uniqueCharacterPrefix,
    canBeShortened,
    // duplicates and unique words
    hasDuplicatesExact,
    hasDuplicatesFuzzy,
    uniqueWordsFoundExact,
    uniqueWordsFoundFuzzy,
    uniqueCharactersExact,
    uniqueCharactersFuzzy,
    // ascii
    hasNonAsciiCharacters,
    isAllLowercase,
    hasConsistentCase,
    hasNumbers,
    // suffix and prefix words
    freeOfPrefixWords,
    freeOfSuffixWords,
    // other
    isAboveBruteForceLine,
  } as WordlistAnalysis

  return {
    sample: words.slice(0, 30),
    stats,
  }
}

// TODO: Think of how to present to user
//
// Lines found               : 7776
// Free of exact duplicates  : true
// Free of fuzzy duplicates  : true
// Free of blank lines       : true
// Unique words found        : 7776
// No start/end whitespace   : true
// No non-ASCII characters   : true
// Unicode normalized        : true
// Free of prefix words      : true
// Free of suffix words      : false
// Uniquely decodable        : true
// Above brute force line    : true
// Length of shortest word   : 3 characters (aim)
// Length of longest word    : 9 characters (zoologist)
// Mean word length          : 6.99 characters
// Entropy per word          : 12.925 bits
// Efficiency per character  : 1.849 bits
// Assumed entropy per char  : 4.308 bits
// Shortest edit distance    : 1
// Mean edit distance        : 6.858
// Longest shared prefix     : 8
// Unique character prefix   : 9
// Kraft-McMillan inequality : satisfied

const constructWordlistMap = async (): Promise<WordlistMapModel> => {
  console.time('analyzeWordlist')
  const wordlistMap = new Map<WordlistSlug, Wordlist>()

  for await (const wordlist of wordlistsReference) {
    const { slug } = wordlist
    console.time(slug)
    const res = await analyzeWordlist(slug)
    if (!res) {
      console.log(`❌ Failed to analyze wordlist: ${slug}, skipping...`)
      console.timeEnd(slug)
      continue
    }
    const { sample, stats } = res
    wordlistMap.set(slug, { ...wordlist, sample, stats })
    console.timeEnd(slug)
  }
  console.timeEnd('analyzeWordlist')
  return wordlistMap
}

const importStatement = `import type { Wordlist, WordlistSlug } from '~/models/wordlist'`
const setupTemplate = (content: string) => `${fileGeneratedComment}\n\n${importStatement}\n\n${exportTemplate(content)}`

const generateWordlistMap = async () => {
  const wordlistMap = await constructWordlistMap()

  const entries = [...wordlistMap.entries()]
  const content = setupTemplate(`new Map<WordlistSlug, Wordlist>(${JSON.stringify(entries, null, 2)})`)

  const written = await writeFile(`${baseOutputDir}/wordlist-map.ts`, content)
  if (written) {
    console.log(`✅ Generated wordlist map`)
  } else {
    console.log(`❌ Failed to generate wordlist map`)
  }
}

await generateWordlistMap()
