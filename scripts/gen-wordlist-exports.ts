import { wordlistsReference } from '~/constants/wordlist-reference'
import type { WordlistReference } from '~/models/wordlist'
import { parseAsDicewareMap, parseAsWordlist } from '~/utils'
import { readFile, writeFile } from '~/utils/io'

const fileGeneratedComment = (localFile: string) => `
// This file was generated by scripts/gen-wordlist-exports.ts, based on the ${localFile} source file
// Do not modify this file directly`.trim()
const exportDefaultTemplate = (content: string) => `export default ${content}`

const generateWordlistExport = async (wordlist: WordlistReference) => {
  const filePath = (filename: string) => {
    return `public/wordlists/${filename}`
  }

  if (!wordlist?.localFile) {
    return false
  }

  const fileStr = await readFile(filePath(wordlist.localFile))
  if (!fileStr) {
    return false
  }

  const outputFilePath = (filename: string) => {
    return `constants/generated/wordlists/${filename}.ts`
  }

  let written = false

  const supportsDiceWare = !!wordlist.diceware

  const setupTemplate = (content: string) => `${fileGeneratedComment(wordlist.localFile)}\n\n${exportDefaultTemplate(content)}`

  if (supportsDiceWare) {
    const map = parseAsDicewareMap(fileStr)

    const words = [...map.values()]
    const entries = [...map.entries()]

    const valuesTemplate = setupTemplate(JSON.stringify(words, null, 2))
    const mapTemplate = setupTemplate(`new Map(${JSON.stringify(entries, null, 2)})`)

    const res = await Promise.all([
      writeFile(outputFilePath(wordlist.id), valuesTemplate),
      writeFile(outputFilePath(`${wordlist.id}-diceware`), mapTemplate),
    ])
    written = res.every(Boolean)
  } else {
    const values = parseAsWordlist(fileStr)
    const template = setupTemplate(JSON.stringify(values, null, 2))
    written = await writeFile(outputFilePath(wordlist.id), template)
  }

  return written
}

const generateWordlistExports = async () => {
  for await (const wordlist of wordlistsReference) {
    const written = await generateWordlistExport(wordlist)
    if (written) {
      console.log(`✅ Generated wordlist datasets: ${wordlist.id}`)
    } else {
      console.log(`❌ Failed to generate wordlist datesets: ${wordlist.id}`)
    }
  }
}

await generateWordlistExports()
